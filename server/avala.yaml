#
#       db 
#      ;MM:
#     ,V^MM. 7MM""Yq.  ,6"Yb.  `7M""MMF',6"Yb.  
#    ,M  `MM `MM   j8 8)   MM    M  MM 8)   MM  
#    AbmmmqMA MM""Yq.  ,pm9MM   ,P  MM  ,pm9MM  
#   A'     VML`M   j8 8M   MM . d'  MM 8M   MM  
# .AMA.   .AMMA.mmm9' `Moo9^Yo8M' .JMML`Moo9^Yo.
#
# Configuration file for the Avala server.
# 
# Follow the instructions in the comments to configure the server according to the
# competition's rulebook and your preferences.
#
# Game settings - adjust these according to the competition's rulebook.
game:
  # Duration of each game tick in seconds.
  tick_duration: 60

  # Regular expression pattern for matching flags.
  # Note: If given in rulebook, remove ^ and $ from the pattern to match flags 
  # anywhere in your output, not just at the beginning and end of text.
  flag_format: "ENO[A-Za-z0-9+\/=]{48}"

  # IP addresses or hostnames of your team's vulnerable machines (vulnboxes).
  # There is usually just a single machine per team, but some competitions may have more.
  # These hosts will be excluded from the attacks unless specified otherwise.
  own_team_hosts: 
    - 10.10.43.1

  # IP addresses or hostnames of your team's vulnerable machines (vulnboxes).
  # There is usually just a single machine per team, but some competitions may have more.
  # These hosts will be excluded from the attacks unless specified otherwise.
  nop_team_hosts: 
    - 10.10.1.1

  # IP addresses or hostnames of the opponent teams.
  # There is usually just a single machine per team, but some competitions may have more.
  # Make sure to include ALL hosts that belong to the opponent teams.
  opp_team_hosts:
    - 10.10.17.1
    - 10.10.28.1
    - 10.10.53.1
    - 10.10.79.1
    - 10.10.86.1
    - 10.10.90.1
    - 10.10.93.1
    - 10.10.94.1
    - 10.10.99.1
    - 10.10.101.1
    - 10.10.103.1
    - 10.10.109.1
    - 10.10.130.1
    - 10.10.137.1
    - 10.10.147.1
    - 10.10.150.1
    - 10.10.159.1
    - 10.10.163.1
    - 10.10.169.1
    - 10.10.172.1
    - 10.10.179.1
    - 10.10.182.1
    - 10.10.188.1
    - 10.10.195.1
    - 10.10.199.1
    - 10.10.203.1
    - 10.10.211.1
    - 10.10.212.1
    - 10.10.222.1
    - 10.10.235.1
    - 10.10.236.1
    - 10.10.237.1
    - 10.10.241.1
    - 10.10.250.1

  # Time-to-live (TTL) of a flag in seconds. Sometimes it's given in ticks.
  # If not specified, leave it to at least 5 ticks.
  flag_ttl: 300

  # Time when the game starts in ISO 8601 format. Example: 2024-08-11T10:00:00+01:00
  game_starts_at: 2025-09-06T18:00:00+01:00

  # Duration of the grace period before the networks open. Specified in hours, minutes, and seconds.
  networks_open_after: 1:00:00

  # Duration of the game. Specified in hours, minutes, and seconds.
  game_ends_after: 8:00:00

# Flag submission configuration
submitter:
  # Path to the submitter script. If running Avala in Docker, you likely don't need to change this.
  script_path: /etc/avala/submitter.py

  # Number of retries if flag submission fails with an error.
  retries: 5

  # If submitting in batches, set interval or per_tick, and batch_size.
  # Duration in seconds between submitting two batches of flags.
  # interval: 5
  # OR
  # Number of batches to submit during a single tick (interval will be calculated based on this value).
  # per_tick: 5
  # Maximum size of a batch of flags. Think of HTTP request size, game server limitations and similar
  # factors to avoid submitting a batch that's too large.
  # batch_size: 50

  # If submitting in a stream, just uncomment the setting below.
  stream: true

  # [Experimental] Spawn a new thread for each call to the submit function. Not recommended
  # if using persistent context in a thread-unsafe way. Disabled by default.
  # threading: true

# Flag IDs fetching
flag_ids:
  # Path to the flag IDs fetching script. If running Avala in Docker, you likely don't need to change this.
  script_path: /etc/avala/flag_ids.py

  # Maximum number of attempts to fetch the flag IDs.
  # This is added to mitigate game-server latency issues. In case of failure,
  # the last fetched flag IDs will be reused.
  retries: 5

  # Interval (in seconds) between retrying to fetch flag IDs.
  interval: 2

# Server access configuration
server:
  # Hostname or IP address to bind to (0.0.0.0 for all interfaces).
  host: 0.0.0.0

  # Port number for the server to listen on.
  # Make sure this port is open and not blocked by any firewall rules.
  port: 2024

  # Password for authorizing clients and allowing dashboard access.
  # It's recommended to use a strong password.
  # https://www.random.org/strings/?num=1&len=32&digits=on&upperalpha=on&loweralpha=on&format=plain
  password: avalarocks

  # Enable serving the dashboard (frontend app) at the root (/) URL.
  # Leave this to true to simplify the setup process.
  dashboard: true

  # List of allowed domains for Cross-Origin Resource Sharing (CORS).
  # Enable this if you're serving the frontend from a different domain.
  # If you have dashboard: true set above, you likely don't need this.
  # cors:
  #   - http://hakuj.me
  #   - https://hakuj.me

# Database connection settings
# If running via Docker compose, ensure that the parameters and the hostname match 
# those in compose.yaml.
database:
  name: avala
  user: admin
  password: admin
  host: postgres
  port: 5432

# RabbitMQ connection settings
# If running via Docker compose, ensure that the parameters and the hostname match 
# those in compose.yaml.
rabbitmq:
  user: guest
  password: guest
  host: rabbitmq
  port: 5672
  management_port: 15672
